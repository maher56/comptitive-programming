ll gcd(ll a, ll b){return(!b?a:gcd(b,a%b));}
ll lcm(ll a, ll b){return((a*b)/ gcd(a,b));}
// extended Euclidean algorithm
/*
when i have the equation (a*x) + (b*y) = gcd(a , b)...
this function will take me three elements {x , y , __gcd} where __gcd is gcd between a and b
.
.
.
When is this algorithm used?
-- This algorithm is used when A and B are co-prime. 
In such cases, x becomes the multiplicative modulo inverse of A under modulo B,
and y becomes the multiplicative modulo inverse of B under modulo A. 
*/
void egcd(ll a, ll b){
    if(b == 0){x = 1;y = 0;_gcd = a;return;}
    egcd(b , a % b);
    int cx = y , cy = x - (a / b) * y;
    x= cx;y = cy;
}

ll mypower(ll x, ll y){
    if(y == 0) return 1 ;
    if(y == 1) return x ;
    ll ret = mypower(x , y / 2);
    ret = (ret * ret) % mod;
    if(y % 2) ret = ( ret * x ) % mod ;
    return ret ;
}

ll Mul(ll x, ll y){
    x %= mod;y %= mod;
    return (x * y) % mod;
}
ll Add (ll x, ll y){
    x %= mod;y %= mod;
    return (x + y) % mod;
}
ll Sub (ll x, ll y){
    x %= mod;y %= mod;
    return (x - y + 2 * mod) % mod;
}
ll Pow (ll x, ll y){
    if(y == 1) return x;
    if(y == 0) return 1;
    ll ret = Pow(x, y / 2);
    ret = Mul(ret, ret);
    if(y % 2) ret = Mul(ret , x);
    return ret;
}
ll Inv(ll x){
    return Pow(x, mod - 2);
}
ll Div(ll x, ll y){
    x %= mod;y %= mod;
    return Mul(x, Inv(y));
}
// factorial and its inverse for all number from 1 to 1e5
ll fact[100010];
ll ifact[100010];
void pre() {
   fact[0] = 1;
   for(int i = 1; i <= 1e5; i++) {
      fact[i] = (fact[i - 1] * 1LL * i) % Mod;
   }
   ifact[1e5] = Inv(fact[1e5]);
   for(int i = 1e5 - 1; i >= 0; i--) {
      ifact[i] = (ifact[i + 1] * 1LL * (i + 1)) % Mod;
   }
}
ll comb(ll x, ll y){
    return Div(fact[x], Mul(fact[y], fact[x - y]));
}

// Combinatorics
ll c(int n , int k) {
    ll res = 1;
    if(k > n - k)k = n - k;
    for(int i = 0 ; i < k ; i++){
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}

// number of divisors of n
void solve() {
    ll n;
    cin >> n;
    int ans = 0;
    for(ll i = 1 ; i * i <= n ; i++)
        if(n % i == 0){
            ans++;
            if(n / i != i)ans++;
        }
}
// number of divisors of a * b
void solve() {
    int a , b;
    cin >> a >> b;
    vector<int> va , vb;
    for(int i = 1 ; i * i <= a ; i++){
        if(a % i == 0) {
            va.pb(i);
            if(a / i != i)va.pb(a / i);
        }
    }
    for(int i = 1 ; i * i <= b ; i++){
        if(b % i == 0) {
            vb.pb(i);
            if(b / i != i)vb.pb(b / i);
        }
    }
    set<int> s;
    for(int i = 0 ; i < va.size() ; i++) {
        for(int j = 0 ; j < vb.size() ; j++) {
            s.insert(va[i] * vb[j]);
        }
    }
    cout << s.size() << endl;
}

// seive for primne numbers
bool isNotPrime[100010];
void seive() {
    isNotPrime[0] = isNotPrime[1] = 1;
    for(ll i = 2 ; i * i <= 1e5 ; i++) {
        if(!isNotPrime[i]) 
            for(ll j = i * i ; j <= 1e5 ; j+= i)
                isNotPrime[j] = 1;
    }
}

// find all prime factors of all numbers between 1 to n
vector<int> v[10010];
bool isNotPrime[10010];
void seive() {
    isNotPrime[0] = isNotPrime[1] = 1;
    for(int i = 2 ; i <= 1e4 ; i++) {
        if(!isNotPrime[i])
        v[i].pb(i);
        for(int j = i * i ; j <= 1e4 ; j += i){
            v[j].pb(i);
            isNotPrime[j] = 1;
         }
    }
}

// find number of prime factors of n
int primeFactors(int n) {
    int cot = 0;
    if(n == 1)return 1;
    while(n % 2 == 0)n /= 2 , cot++;
    for(int i = 3 ; i * i <= n ; i += 2) {
        while(n % i == 0)n /= i , cot++;
    }
    if(n > 1)cot++;
    return cot;
}

// to find number of prime factors of n in o(1) almost
int minPrime[n + 1];
void sieve() {
    for (int i = 2; i * i <= n; ++i) {
        if (minPrime[i] == 0) {
            for (int j = i * i; j <= n; j += i) {
                if (minPrime[j] == 0)minPrime[j] = i;
            }
        }
    }
    for (int i = 2; i <= n; ++i)
        if (minPrime[i] == 0)minPrime[i] = i;
}
// for example finding prime factors to n 
vector<int> factorize(int n) {
    vector<int> res;
    while (n != 1) {
        res.push_back(minPrime[n]);
        n /= minPrime[n];
    }
    return res;
}

// to find prime factors in range from [l...r]
bool isPrime[r - l + 1]; //filled by true
memset(isprime , 1 , sizeof(isprime));
for (long long i = 2; i * i <= r; ++i) {
    for (long long j = max(i * i, (l + (i - 1)) / i  * i); j <= r; j += i) {
        isPrime[j - l] = false;
    }
}
for (long long i = max(l, 2); i <= r; ++i) {
    if (isPrime[i - l]) {
        //then i is prime
    }
}

// if we consider n = a^i * b^j * c*k... ;a,b,c,... are factors of n
// number of coprimes = n * ((1 - 1/a) * (1 - 1/b) * (1 - 1/c) ...)
// number of numbers between[1...n] that the gcd between any of them and n equal to 1
ll phi(ll n){
    ll res = n;
    if(n % 2 == 0)res -= (res/2);
    while(n % 2 == 0)n /= 2;
    for(ll i=3 ; i * i <= n; i += 2){
        if(n % i == 0)res-=(res/i);
        while(n % i == 0)n/=i;
    }
    if(n>1)res-=res/n;
    return res;
}

// phi for all number between 1 to n
int phi[1000010];
void phis() {
    for (int i = 0; i <= 1e6; i++)
        phi[i] = i;
    for (int i = 2; i <= 1e6; i++) {
        if (phi[i] == i) {
            for (int j = i; j <= 1e6; j += i)
                phi[j] -= phi[j] / i;
        }
    }
}
// count divisors for all number between 2 and 1e6
int divi[(int)1e6 + 7];
void divSeive(){
    for(ll i = 2; i <= 1e6 ;i++){
        for(ll j = i ; j <= 1e6 ;j += i)
            divi[j]++;
    }
}

// FermatPrimalityTesting to check from the number if it's in O(k*log(n))
ll gcd(ll a, ll b){return(!b?a:gcd(b,a%b));}
vector<ll> randomLongLong(ll N, ll K){
    vector<ll> res;
    std::random_device rd;
    std::default_random_engine generator(rd());
    std::uniform_int_distribution<long long> distribution(0,N);
    for(int i = 0; i < K; i++){
        res.push_back(distribution(generator));
    }
    return res;
}
ll mypower(ll x, ll y , ll mod){
    if(y == 0) return 1 ;
    if(y == 1) return x ;
    __int128  ret = mypower(x , y / 2 , mod);
    ret = (ret * ret) % mod;
    if(y % 2) ret = ( ret * x ) % mod ;
    return ret ;
}
bool isPrime(ll n, ll k){
   if (n <= 1 || n == 4) return 0;
   if (n <= 3) return 1;
   vector<ll> v = randomLongLong(n , k);
   for(auto it : v){
       // Pick a random number in [2..n-2]       
       // Above corner cases make sure that n > 4
       ll a = 2 + 1ll * it %(n - 4); 
       // Checking if a and n are co-prime
       if (gcd(n , a) != 1)return 0;
  
       // Fermat's little theorem
       if (mypower(a, n-1, n) != 1)
          return 0;
    }
    return 1;
}

// Pseudocode for MillerRabin_PrimalityTesting
function: MillerRabin_PrimalityTesting(int N):
    if N%2 = 0:
        return composite
    
    write N-1 as (2^R . D) where D is odd number
    pick a random integer k     //not too less. not too high.
    
    LOOP: repeat k times:
        pick a random integer A in range [2,N-2]
        X = A^D % N
        if X = 1 or X = N-1:
            continue LOOP
        for i from 1 to r-1:
            X = X^2 % N
            if X = 1:
                return composite
            if X = N-1:
                continue LOOP
        return composite
    return probably prime
